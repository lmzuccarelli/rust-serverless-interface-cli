use custom_logger::*;
use hyper::server::conn::http1;
use hyper::service::service_fn;
use hyper_util::rt::TokioIo;
use serverless_interface_template::*;
use std::net::SocketAddr;
use tokio::net::TcpListener;

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error + Send + Sync>> {
    let log = &Logging {
        log_level: Level::{{ LOG_LEVEL }},
    };

    let addr: SocketAddr = "{{ IP }}:{{ PORT }}".parse().unwrap();

    let listener = TcpListener::bind(&addr).await?;
    log.info(&format!("Listening on http://{}", addr));
    loop {
        let (stream, _) = listener.accept().await?;
        let io = TokioIo::new(stream);

        tokio::task::spawn(async move {
            let service = service_fn(move |req| process_handler(log, req));
            if let Err(err) = http1::Builder::new().serve_connection(io, service).await {
                log.error(&format!("Failed to serve connection: {:?}", err));
            }
        });
    }
}
